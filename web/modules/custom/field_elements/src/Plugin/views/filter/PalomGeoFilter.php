<?php

namespace Drupal\field_elements\Plugin\views\filter;

use Drupal\Core\Form\FormStateInterface;
use Drupal\palom_libs\PalomGeo;
use Drupal\views\Plugin\views\display\DisplayPluginBase;
use Drupal\views\Plugin\views\filter\FilterPluginBase;
use Drupal\views\ViewExecutable;

/**
 * Class PalomGeoFilter
 * @package Drupal\field_elements\Plugin\views\filter
 *
 * @ingroup views_filter_handlers
 *
 * @ViewsFilter("palom_views_geo_filter")
 */
class PalomGeoFilter extends FilterPluginBase {

  public function init(ViewExecutable $view, DisplayPluginBase $display, array &$options = NULL)
  {
    parent::init($view, $display, $options); // TODO: Change the autogenerated stub
  }

  protected function defineOptions()
  {
    $options =  parent::defineOptions(); // TODO: Change the autogenerated stub
//    $options['is_grouped']['default'] = TRUE;
    return $options;
  }

  protected function valueForm(&$form, FormStateInterface $form_state)
  {
//    $form['value']['#tree'] = TRUE;
    parent::valueForm($form, $form_state);

    if ($form_state->get('exposed')){

      $form['geo']['country_id'] = [
        '#empty_option' => t('Select a country'),
        '#type' => 'select',
        '#title' => t('Country'),
        '#options' => PalomGeo::getCountryList(),
        '#default_value' => 2,
      ];

      $form['geo']['region_id'] = [
        '#empty_option' => t('All the regions'),
        '#type' => 'select',
        '#title' => t('Region'),
        '#options' => PalomGeo::getRegionList(2),
      ];

      $form['value'] = [
        '#type' => 'hidden',
//        '#default_value' => '2_0',
      ];

      $form['#submit'][] = '::mySubmitFunction';
    }

  }

  protected function mySubmitFunction(&$form, FormStateInterface $form_state){
    drupal_set_message("Exposed form submitted !!!");
  }

  public function submitExposed(&$form, FormStateInterface $form_state)
  {
    parent::submitExposed($form, $form_state); // TODO: Change the autogenerated stub

    $form_state->setValue('country_id', '2');
    $form_state->setValue('region_id', '35');
    $form_state->setValue($this->realField, '2_35');
    $this->value[0] = '2_35';
    $val = $form_state->getValues();
  }

  public function submitExposeForm($form, FormStateInterface $form_state)
  {
    drupal_set_message("submitExposeForm");
    parent::submitExposeForm($form, $form_state); // TODO: Change the autogenerated stub
  }

  public function submitOptionsForm(&$form, FormStateInterface $form_state)
  {
    drupal_set_message("submitOptionsForm");
    parent::submitOptionsForm($form, $form_state); // TODO: Change the autogenerated stub
  }

  public function submitExtraOptionsForm($form, FormStateInterface $form_state)
  {
    drupal_set_message("submitTemporaryForm");
    parent::submitExtraOptionsForm($form, $form_state); // TODO: Change the autogenerated stub
  }

  public function submitTemporaryForm($form, FormStateInterface $form_state)
  {
    parent::submitTemporaryForm($form, $form_state); // TODO: Change the autogenerated stub
  }

  public function query()
  {
//    $gr = $this->isAGroup();
//    drupal_set_message($gr ? 'true' : 'false');
    $this->ensureMyTable();

    list($country_id, $region_id) = explode('_', $this->value[0]);

    if ($country_id>0){

      $field_country = "$this->tableAlias.$this->realField"."_country_id";
      $this->query->addWhere($this->option['group'], $field_country, $country_id, '=');

    }

    if ($region_id>0){

      $field_region = "$this->tableAlias.$this->realField"."_region_id";
      $this->query->addWhere($this->option['group'], $field_region, $region_id, '=');

    }
  }

  /*
  public function acceptExposedInput($input)
  {
    $rc =  parent::acceptExposedInput($input);
    return $rc;
  }
  */

}

