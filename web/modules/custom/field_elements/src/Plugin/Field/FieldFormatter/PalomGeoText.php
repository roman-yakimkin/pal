<?php

namespace Drupal\field_elements\Plugin\Field\FieldFormatter;

use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Field\FormatterBase;
use Drupal\Core\Form\FormStateInterface;

/**
 * Plugin implementation of the 'field_palom_geo_text' formatter.
 *
 * @FieldFormatter(
 *   id = "field_palom_geo_text",
 *   module = "field_elements",
 *   label = @Translation("Palom Geo Country and Region simple formatter"),
 *   field_types = {
 *     "field_palom_geo"
 *   }
 * )
 */
class PalomGeoText extends FormatterBase {

  public static function defaultSettings()
  {
    $options =  parent::defaultSettings(); // TODO: Change the autogenerated stub

    $options['country_only'] = '{{country}}';
    $options['country_and_region'] = '{{country}}, {{region}}';
    return $options;
  }

  public function viewElements(FieldItemListInterface $items, $langcode)
  {
    // TODO: Implement viewElements() method.
    $elements = [];

    foreach ($items->getValue() as $delta => $item) {

      $country_id = $item['country_id'];
      $region_id = $item['region_id'];

      $country = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($country_id);
      $region = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($region_id);

      $country_name = $country->name->value;
      $country_href = $country->toLink()->toString();

      // Страна
      if ($region_id == 0){
        $result = str_replace(
          ['{{country}}', '{{country_href}}'],
          [$country_name, $country_href],
          $this->getSetting('country_only')
        );
      }

      // Страна и регион
      else{
        $region_name = $region->name->value;
        $region_href = $region->toLink()->toString();

        $result = str_replace(
          ['{{country}}', '{{country_href}}', '{{region}}', '{{region_href}}'],
          [$country_name, $country_href, $region_name, $region_href],
          $this->getSetting('country_and_region')
        );
      }

      $elements[$delta] = [
        '#type' => 'markup',
        '#markup' => $result,
      ];
    }

    return $elements;
  }

  public function settingsForm(array $form, FormStateInterface $form_state)
  {
    $form =  parent::settingsForm($form, $form_state); // TODO: Change the autogenerated stub

    $form['country_only'] = [
      '#type' => 'textfield',
      '#title' => t('Template for country only'),
      '#description' => t('{{country}} - country name, {{country_href}} - country reference'),
      '#default_value' => $this->getSetting('country_only'),
    ];

    $form['country_and_region'] = [
      '#type' => 'textfield',
      '#title' => t('Template for country and region'),
      '#description' => t('{{country}} - country name, {{country_href}} - country reference <br /> {{region}} - region name, {{region_href}} - region reference'),
      '#default_value' => $this->getSetting('country_and_region'),
    ];

    return $form;
  }

  public function settingsSummary()
  {
    $summary = parent::settingsSummary(); // TODO: Change the autogenerated stub

    $settings = $this->getSettings();
    $summary[] = t('Country only display mode: @mode', ['@mode' => $settings['country_only']]);
    $summary[] = t('Country and region display mode: @mode', ['@mode' => $settings['country_and_region']]);

    return $summary;
  }
}